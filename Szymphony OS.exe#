import tkinter as tk
from tkinter import messagebox
import time
import os
import random

class SzymphonyOS:
    def __init__(self, root):
        self.root = root
        self.root.title("SzymphonyOS")
        self.root.geometry("1024x768")
        self.root.configure(bg="lightblue")

        # Placeholder for opened apps (to simulate taskbar icons)
        self.opened_apps = {}

        # Set up the taskbar and start menu
        self.setup_taskbar()
        self.setup_start_menu()

        # Wallpaper (set background image or color)
        self.root.configure(bg="lightblue")

    def setup_taskbar(self):
        # Taskbar
        self.taskbar = tk.Frame(self.root, bg="black", height=40)
        self.taskbar.pack(side="bottom", fill="x")

        # Start Button
        self.start_button = tk.Button(self.taskbar, text="Start", command=self.toggle_start_menu, bg="black", fg="white", font=("Arial", 12))
        self.start_button.pack(side="left")

        # Taskbar icons
        self.taskbar_icons = tk.Frame(self.taskbar, bg="black")
        self.taskbar_icons.pack(side="left")

        # Time Display
        self.time_label = tk.Label(self.taskbar, text="", bg="black", fg="white", font=("Arial", 12))
        self.time_label.pack(side="right")
        self.update_time()

        # Shutdown Button
        self.shutdown_button = tk.Button(self.taskbar, text="Shutdown", command=self.shutdown, bg="black", fg="red", font=("Arial", 12))
        self.shutdown_button.pack(side="right")

    def setup_start_menu(self):
        # Start menu
        self.start_menu = tk.Frame(self.root, bg="white", width=200, height=400)
        self.start_menu.place(x=0, y=368)  # Appears from the bottom left
        self.start_menu.pack_propagate(False)
        self.start_menu.lower()  # Initially hidden

        # Add items to the start menu
        tk.Label(self.start_menu, text="Apps", bg="lightgray", font=("Arial", 14)).pack(fill="x")

        self.calc_button = tk.Button(self.start_menu, text="Calculator", command=self.open_calculator)
        self.calc_button.pack(fill="x")

        self.text_button = tk.Button(self.start_menu, text="Text Editor", command=self.open_text_editor)
        self.text_button.pack(fill="x")

        self.tictactoe_button = tk.Button(self.start_menu, text="Tic-Tac-Toe", command=self.open_tic_tac_toe)
        self.tictactoe_button.pack(fill="x")

        self.paint_button = tk.Button(self.start_menu, text="Paint", command=self.open_paint)
        self.paint_button.pack(fill="x")

    def toggle_start_menu(self):
        if self.start_menu.winfo_ismapped():
            self.start_menu.lower()
        else:
            self.start_menu.lift()

    def update_time(self):
        current_time = time.strftime("%H:%M:%S")
        self.time_label.config(text=current_time)
        self.root.after(1000, self.update_time)

    def add_to_taskbar(self, app_name, icon_label):
        if app_name not in self.opened_apps:
            app_icon = tk.Label(self.taskbar_icons, text=icon_label, bg="gray", fg="white", padx=5, pady=2)
            app_icon.pack(side="left")
            self.opened_apps[app_name] = app_icon

    def remove_from_taskbar(self, app_name):
        if app_name in self.opened_apps:
            self.opened_apps[app_name].destroy()
            del self.opened_apps[app_name]

    def shutdown(self):
        confirm = messagebox.askyesno("Shutdown", "Are you sure you want to shut down?")
        if confirm:
            self.root.quit()

    def open_calculator(self):
        app_name = "Calculator"
        calc_window = tk.Toplevel(self.root)
        calc_window.title(app_name)
        calc_window.geometry("300x400")
        calc_window.protocol("WM_DELETE_WINDOW", lambda: [self.remove_from_taskbar(app_name), calc_window.destroy()])

        # Add to taskbar
        self.add_to_taskbar(app_name, "Calc")

        # Calculator functionality
        calc_input = tk.Entry(calc_window, width=16, font=("Arial", 24), borderwidth=2, relief="solid")
        calc_input.grid(row=0, column=0, columnspan=4)

        buttons = [
            '7', '8', '9', '/',
            '4', '5', '6', '*',
            '1', '2', '3', '-',
            '0', '.', '=', '+'
        ]

        def on_button_click(button):
            current_text = calc_input.get()
            if button == "=":
                try:
                    result = eval(current_text)
                    calc_input.delete(0, tk.END)
                    calc_input.insert(tk.END, str(result))
                except Exception as e:
                    calc_input.delete(0, tk.END)
                    calc_input.insert(tk.END, "Error")
            else:
                calc_input.insert(tk.END, button)

        for idx, button in enumerate(buttons):
            tk.Button(calc_window, text=button, height=2, width=4, command=lambda b=button: on_button_click(b)).grid(row=1 + idx // 4, column=idx % 4)

    def open_text_editor(self):
        app_name = "Text Editor"
        editor_window = tk.Toplevel(self.root)
        editor_window.title(app_name)
        editor_window.geometry("600x400")
        editor_window.protocol("WM_DELETE_WINDOW", lambda: [self.remove_from_taskbar(app_name), editor_window.destroy()])

        # Add to taskbar
        self.add_to_taskbar(app_name, "Text")

        # Text editor functionality
        text_area = tk.Text(editor_window, wrap="word")
        text_area.pack(expand=1, fill="both")

        # Menu
        menu = tk.Menu(editor_window)
        editor_window.config(menu=menu)

        def save_file():
            with open("saved_text.txt", "w") as f:
                f.write(text_area.get(1.0, tk.END))

        file_menu = tk.Menu(menu, tearoff=0)
        menu.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Save", command=save_file)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=editor_window.destroy)

    def open_tic_tac_toe(self):
        app_name = "Tic-Tac-Toe"
        ttt_window = tk.Toplevel(self.root)
        ttt_window.title(app_name)
        ttt_window.geometry("300x300")
        ttt_window.protocol("WM_DELETE_WINDOW", lambda: [self.remove_from_taskbar(app_name), ttt_window.destroy()])

        # Add to taskbar
        self.add_to_taskbar(app_name, "TTT")

        # Tic-Tac-Toe functionality
        current_player = ["X"]

        def check_winner():
            for i in range(3):
                if buttons[i][0]["text"] == buttons[i][1]["text"] == buttons[i][2]["text"] != "":
                    return buttons[i][0]["text"]
                if buttons[0][i]["text"] == buttons[1][i]["text"] == buttons[2][i]["text"] != "":
                    return buttons[0][i]["text"]
            if buttons[0][0]["text"] == buttons[1][1]["text"] == buttons[2][2]["text"] != "":
                return buttons[0][0]["text"]
            if buttons[0][2]["text"] == buttons[1][1]["text"] == buttons[2][0]["text"] != "":
                return buttons[0][2]["text"]
            return None

        def on_button_click(row, col):
            if buttons[row][col]["text"] == "" and not check_winner():
                buttons[row][col]["text"] = current_player[0]
                winner = check_winner()
                if winner:
                    messagebox.showinfo("Winner", f"Player {winner} wins!")
                current_player[0] = "O" if current_player[0] == "X" else "X"

        buttons = [[tk.Button(ttt_window, text="", font=("Arial", 20), width=5, height=2, command=lambda r=r, c=c: on_button_click(r, c)) for c in range(3)] for r in range(3)]
        for r in range(3):
            for c in range(3):
                buttons[r][c].grid(row=r, column=c)

    def open_paint(self):
        app_name = "Paint"
        paint_window = tk.Toplevel(self.root)
        paint_window.title(app_name)
        paint_window.geometry("800x600")
        paint_window.protocol("WM_DELETE_WINDOW", lambda: [self.remove_from_taskbar(app_name), paint_window.destroy()])

        # Add to taskbar
        self.add_to_taskbar(app_name, "Paint")

        # Paint functionality
        canvas = tk.Canvas(paint_window, bg="white")
        canvas.pack(fill="both", expand=True)

        def paint(event):
            x1, y1 = (event.x - 2), (event.y - 2)
            x2, y2 = (event.x + 2), (event.y + 2)
            canvas.create_oval(x1, y1, x2, y2, fill="black", outline="black")

        canvas.bind("<B1-Motion>", paint)

if __name__ == "__main__":
    root = tk.Tk()
    os_app = SzymphonyOS(root)
    root.mainloop()

